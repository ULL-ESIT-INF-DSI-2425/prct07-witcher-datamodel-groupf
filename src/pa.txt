import { DatabaseManager } from "./dataBase.js";
/**
 * Clase que representa los bien
 */
export class Bien {
  /**
   * Constructor de la clase Bien
   * @param _idUnico - idUnico del bien
   * @param _nombre - nombre del bien
   * @param _descripcion - descripcion del bien
   * @param _material - material del bien
   * @param _peso - peso del bien
   * @param _valorCoronas - valorCoronas del bien
   */
  constructor(
      private _idUnico: string,
      private _nombre: string,
      private _descripcion: string,
      private _material: string,
      private _peso: number,
      private _valorCoronas: number
  ) {
    DatabaseManager.guardarDatos('Bien', this);
  }

  // Getters
  /**
   * Getter que devuelve el idUnico de bienes
   * @returns - idUnico de bienes 
   */
  get idUnico(): string {
    return this._idUnico;
  }

  /**
   * Getter que devuelve el nombre del bien
   * @returns - Nombre del bien
   */
  get nombre(): string {
    return this._nombre;
  }

  /**
   * Getter que devuelve la descripcion del bien
   * @returns - descripcion del bien
   */
  get descripcion(): string {
    return this._descripcion;
  }
  
  /**
   * Getter que devuelve el material del bien
   * @returns - material del bien
   */
  get material(): string {
    return this._material;
  }

  /**
   * Getter que devuelve el peso del bien
   * @returns - peso del bien
   */
  get peso(): number {
    return this._peso;
  }

  /**
   * Getter que devuelve el valorCoronas del bien
   * @returns - valorCoronas del bi
n     */
  get valorCoronas(): number {
    return this._valorCoronas;
  }


  /**
   * Setter que establece el idUnico del bien
   * @param idUnico - idUnico del bien
   */
  set idUnico(idUnico: string) {
    this._idUnico = idUnico;
  }

  /**
   * Setter que establece el nombre del bien
   * @param nombre - nombre del bien
   */
  set nombre(nombre: string) {
    this._nombre = nombre;
  }
  
  /**
   * Setter que establece la descripcion del bien
   * @param descripcion - descripcion del bien
   */
  set descripcion(descripcion: string) {
    this._descripcion = descripcion;
  }
  
  /**
   * Setter que establece el material del bien
   * @param material - material del bien
   */
  set material(material: string) {
    this._material = material;
  }

  /**
   * Setter que estable el peso del bien
   * @param peso - peso del bien
   */
  set peso(peso: number) {
    this._peso = peso;
  }

  /**
   * Setter que establece el valorCoronas del bien
   * @param valorCoronas - valorCoronas del bien
   */
  set valorCoronas(valorCoronas: number) {
    this._valorCoronas = valorCoronas;
  }
}  import { DatabaseManager } from "./dataBase.js";
import { GestorTransacciones } from "./gestion-transicion.js";
import { Transaccion } from "./trancision.js";

/**
 * Clase que representa a todas las criaturas que buscan herramientas
 */
export class Cliente {
  private gestorTransacciones: GestorTransacciones;

  /**
   * Constructor de la clase Cliente
   * @param _idUnico - ID único del cliente
   * @param _nombre - Nombre del cliente
   * @param _raza - Raza del cliente
   * @param _ubicacion - Ubicación del cliente
   */
  constructor(
    private _idUnico: string,
    private _nombre: string,
    private _raza: string,
    private _ubicacion: string,
  ) {
    this.gestorTransacciones = new GestorTransacciones();
    DatabaseManager.guardarDatos('Cliente', this);
  }

  // Getters

  /**
   * Getter que devuelve el ID único del cliente
   * @returns - ID único del cliente
   */
  get idUnico(): string {
    return this._idUnico;
  }

  /**
   * Getter que devuelve el nombre del cliente
   * @returns - Nombre del cliente
   */
  get nombre(): string {
    return this._nombre;
  }

  /**
   * Getter que devuelve la raza del cliente
   * @returns - Raza del cliente
   */
  get raza(): string {
    return this._raza;
  }

  /**
   * Getter que devuelve la ubicación del cliente
   * @returns - Ubicación del cliente
   */
  get ubicacion(): string {
    return this._ubicacion;
  }

  // Setters

  /**
   * Setter que establece el ID único del cliente
   * @param idUnico - ID único del cliente
   */
  set idUnico(idUnico: string) {
    this._idUnico = idUnico;
  }

  /**
   * Setter que establece el nombre del cliente
   * @param nombre - Nombre del cliente
   */
  set nombre(nombre: string) {
    this._nombre = nombre;
  }

  /**
   * Setter que establece la raza del cliente
   * @param raza - Raza del cliente
   */
  set raza(raza: string) {
    this._raza = raza;
  }

  /**
   * Setter que establece la ubicación del cliente
   * @param ubicacion - Ubicación del cliente
   */
  set ubicacion(ubicacion: string) {
    this._ubicacion = ubicacion;
  }

  // Métodos para interactuar con el gestor de transacciones

  /**
   * Registra una venta realizada por el cliente
   * @param fecha - Fecha de la venta
   * @param bienes - Bienes intercambiados
   * @param cantidadCoronas - Cantidad de coronas involucrada
   * @param detalles - Detalles adicionales
   */
  registrarVenta(fecha: Date, bienes: string[], cantidadCoronas: number, detalles: string): void {
    this.gestorTransacciones.registrarVenta(fecha, bienes, cantidadCoronas, detalles);
  }

  /**
   * Registra una compra realizada por el cliente
   * @param fecha - Fecha de la compra
   * @param bienes - Bienes intercambiados
   * @param cantidadCoronas - Cantidad de coronas involucrada
   * @param detalles - Detalles adicionales
   */
  registrarCompra(fecha: Date, bienes: string[], cantidadCoronas: number, detalles: string): void {
    this.gestorTransacciones.registrarCompra(fecha, bienes, cantidadCoronas, detalles);
  }

  /**
   * Registra una devolución realizada por el cliente
   * @param fecha - Fecha de la devolución
   * @param bienes - Bienes devueltos
   * @param cantidadCoronas - Cantidad de coronas involucrada
   * @param detalles - Detalles adicionales
   */
  registrarDevolucion(fecha: Date, bienes: string[], cantidadCoronas: number, detalles: string): void {
    this.gestorTransacciones.registrarDevolucion(fecha, bienes, cantidadCoronas, detalles);
  }

  /**
   * Obtiene el historial de transacciones del cliente
   * @returns - Historial de transacciones
   */
  obtenerHistorialTransacciones(): Transaccion[] {
    return this.gestorTransacciones.obtenerHistorial();
  }
} import { DatabaseManager } from "./dataBase.js";
import { GestorTransacciones } from "./gestion-transicion.js";
import { Transaccion } from "./trancision.js";

/**
 * Clase que representa a cada Mercader
 */
export class Mercader {
  private gestorTransacciones: GestorTransacciones;

  /**
   * Constructor de la clase Mercader
   * @param _id - ID único del mercader
   * @param _nombre - Nombre del mercader
   * @param _tipo - Tipo de oficio del mercader
   * @param _ubicacion - Ubicación del mercader
   */
  constructor(
    private _id: string,
    private _nombre: string,
    private _tipo: string,
    private _ubicacion: string,
  ) {
    this.gestorTransacciones = new GestorTransacciones();
    DatabaseManager.guardarDatos('Mercader', this);
  }

  // Getters

  /**
   * Getter que devuelve el ID único del mercader
   * @returns - ID único del mercader
   */
  get idUnico(): string {
    return this._id;
  }

  /**
   * Getter que devuelve el nombre del mercader
   * @returns - Nombre del mercader
   */
  get nombre(): string {
    return this._nombre;
  }

  /**
   * Getter que devuelve el tipo de oficio del mercader
   * @returns - Tipo de oficio
   */
  get tipo(): string {
    return this._tipo;
  }

  /**
   * Getter que devuelve la ubicación del mercader
   * @returns - Ubicación del mercader
   */
  get ubicacion(): string {
    return this._ubicacion;
  }

  // Setters

  /**
   * Setter que modifica el ID único del mercader
   * @param id - ID único del mercader
   */
  set idUnico(id: string) {
    this._id = id;
  }

  /**
   * Setter que modifica el nombre del mercader
   * @param nombre - Nombre del mercader
   */
  set nombre(nombre: string) {
    this._nombre = nombre;
  }

  /**
   * Setter que modifica el tipo de oficio del mercader
   * @param tipo - Tipo de oficio del mercader
   */
  set tipo(tipo: string) {
    this._tipo = tipo;
  }

  /**
   * Setter que modifica la ubicación del mercader
   * @param ubicacion - Ubicación del mercader
   */
  set ubicacion(ubicacion: string) {
    this._ubicacion = ubicacion;
  }

  // Métodos para interactuar con el gestor de transacciones

  /**
   * Registra una venta realizada por el mercader
   * @param fecha - Fecha de la venta
   * @param bienes - Bienes intercambiados
   * @param cantidadCoronas - Cantidad de coronas involucrada
   * @param detalles - Detalles adicionales
   */
  registrarVenta(fecha: Date, bienes: string[], cantidadCoronas: number, detalles: string): void {
    this.gestorTransacciones.registrarVenta(fecha, bienes, cantidadCoronas, detalles);
  }

  /**
   * Registra una compra realizada por el mercader
   * @param fecha - Fecha de la compra
   * @param bienes - Bienes intercambiados
   * @param cantidadCoronas - Cantidad de coronas involucrada
   * @param detalles - Detalles adicionales
   */
  registrarCompra(fecha: Date, bienes: string[], cantidadCoronas: number, detalles: string): void {
    this.gestorTransacciones.registrarCompra(fecha, bienes, cantidadCoronas, detalles);
  }

  /**
   * Registra una devolución realizada por el mercader
   * @param fecha - Fecha de la devolución
   * @param bienes - Bienes devueltos
   * @param cantidadCoronas - Cantidad de coronas involucrada
   * @param detalles - Detalles adicionales
   */
  registrarDevolucion(fecha: Date, bienes: string[], cantidadCoronas: number, detalles: string): void {
    this.gestorTransacciones.registrarDevolucion(fecha, bienes, cantidadCoronas, detalles);
  }

  /**
   * Obtiene el historial de transacciones del mercader
   * @returns - Historial de transacciones
   */
  obtenerHistorialTransacciones(): Transaccion[] {
    return this.gestorTransacciones.obtenerHistorial();
  }
} import inquirer from "inquirer";
import fs from "fs/promises";
import { Inventario } from "./Inventario.js";
import { Bien } from "./bienes.js";
import { Cliente } from "./cliente.js";
import { Mercader } from "./mercaderes.js";

const inventario = new Inventario();

// Menú principal
async function menuPrincipal() {
  const respuesta = await inquirer.prompt([
    {
      type: "list",
      name: "opcion",
      message: "¿Qué acción deseas realizar?",
      choices: [
        "Añadir",
        "Eliminar",
        "Modificar",
        "Consultar",
        "Buscar",
        "Ordenar",
        "Salir"
      ]
    }
  ]);

  switch (respuesta.opcion) {
    case "Añadir":
      await menuAñadir();
      break;
    case "Eliminar":
      await menuEliminar();
      break;
    case "Modificar":
      await menuModificar();
      break;
    case "Consultar":
      await menuConsultar();
      break;
    case "Buscar":
      await menuBuscar();
      break;
    case "Ordenar":
      await menuOrdenar();
      break;
    case "Salir":
      console.log("¡Hasta luego!");
      return;
  }

  await menuPrincipal();
}

// Submenú para Añadir
async function menuAñadir() {
  const respuesta = await inquirer.prompt([
    {
      type: "list",
      name: "opcion",
      message: "¿Qué deseas añadir?",
      choices: [
        "Añadir un bien",
        "Añadir un mercader",
        "Añadir un cliente",
        "Volver al menú principal"
      ]
    }
  ]);

  switch (respuesta.opcion) {
    case "Añadir un bien":
      await agregarBien();
      break;
    case "Añadir un mercader":
      await agregarMercader();
      break;
    case "Añadir un cliente":
      await agregarCliente();
      break;
    case "Volver al menú principal":
      return;
  }

  await menuAñadir();
}

// Submenú para Eliminar
async function menuEliminar() {
  const respuesta = await inquirer.prompt([
    {
      type: "list",
      name: "opcion",
      message: "¿Qué deseas eliminar?",
      choices: [
        "Eliminar un bien",
        "Eliminar un mercader",
        "Eliminar un cliente",
        "Volver al menú principal"
      ]
    }
  ]);

  switch (respuesta.opcion) {
    case "Eliminar un bien":
      await eliminarBien();
      break;
    case "Eliminar un mercader":
      await eliminarMercader();
      break;
    case "Eliminar un cliente":
      await eliminarCliente();
      break;
    case "Volver al menú principal":
      return;
  }

  await menuEliminar();
}

// Submenú para Modificar
async function menuModificar() {
  const respuesta = await inquirer.prompt([
    {
      type: "list",
      name: "opcion",
      message: "¿Qué deseas modificar?",
      choices: [
        "Modificar un bien",
        "Modificar un mercader",
        "Modificar un cliente",
        "Volver al menú principal"
      ]
    }
  ]);

  switch (respuesta.opcion) {
    case "Modificar un bien":
      await modificarBien();
      break;
    case "Modificar un mercader":
      await modificarMercader();
      break;
    case "Modificar un cliente":
      await modificarCliente();
      break;
    case "Volver al menú principal":
      return;
  }

  await menuModificar();
}

// Submenú para Consultar
async function menuConsultar() {
  const respuesta = await inquirer.prompt([
    {
      type: "list",
      name: "opcion",
      message: "¿Qué deseas consultar?",
      choices: [
        "Consultar bienes",
        "Consultar mercaderes",
        "Consultar clientes",
        "Volver al menú principal"
      ]
    }
  ]);

  switch (respuesta.opcion) {
    case "Consultar bienes":
      console.log(inventario.listarBienes());
      break;
    case "Consultar mercaderes":
      console.log(inventario.listarMercaderes());
      break;
    case "Consultar clientes":
      console.log(inventario.listarClientes());
      break;
    case "Volver al menú principal":
      return;
  }

  await menuConsultar();
}

// Submenú para Buscar
async function menuBuscar() {
  const respuesta = await inquirer.prompt([
    {
      type: "list",
      name: "opcion",
      message: "¿Qué deseas buscar?",
      choices: [
        "Buscar bien por nombre",
        "Buscar mercader por nombre",
        "Buscar cliente por nombre",
        "Volver al menú principal"
      ]
    }
  ]);

  switch (respuesta.opcion) {
    case "Buscar bien por nombre":
      await buscarBienPorNombre();
      break;
    case "Buscar mercader por nombre":
      await buscarMercaderPorNombre();
      break;
    case "Buscar cliente por nombre":
      await buscarClientePorNombre();
      break;
    case "Volver al menú principal":
      return;
  }

  await menuBuscar();
}

// Submenú para Ordenar
async function menuOrdenar() {
  const respuesta = await inquirer.prompt([
    {
      type: "list",
      name: "opcion",
      message: "¿Qué deseas ordenar?",
      choices: [
        "Ordenar bienes por nombre",
        "Ordenar bienes por valor",
        "Volver al menú principal"
      ]
    }
  ]);

  switch (respuesta.opcion) {
    case "Ordenar bienes por nombre":
      const ordenNombre = await inquirer.prompt([
        { type: "confirm", name: "ascendente", message: "¿Orden ascendente?" }
      ]);
      console.log(inventario.ordenarBienesPorNombre(ordenNombre.ascendente));
      break;
    case "Ordenar bienes por valor":
      const ordenValor = await inquirer.prompt([
        { type: "confirm", name: "ascendente", message: "¿Orden ascendente?" }
      ]);
      console.log(inventario.ordenarBienesPorValor(ordenValor.ascendente));
      break;
    case "Volver al menú principal":
      return;
  }

  await menuOrdenar();
}

// Funciones para agregar
async function agregarBien() {
  const respuestas = await inquirer.prompt([
    { type: "input", name: "id", message: "ID del bien:" },
    { type: "input", name: "nombre", message: "Nombre del bien:" },
    { type: "input", name: "descripcion", message: "Descripción del bien:" },
    { type: "input", name: "material", message: "Material del bien:" },
    { type: "number", name: "peso", message: "Peso del bien:" },
    { type: "number", name: "valor", message: "Valor del bien en coronas:" }
  ]);

  const nuevoBien = new Bien(
    respuestas.id,
    respuestas.nombre,
    respuestas.descripcion,
    respuestas.material,
    respuestas.peso,
    respuestas.valor
  );

  inventario.agregarBien(nuevoBien);
  console.log("Bien añadido con éxito.");
}

async function agregarMercader() {
  const respuestas = await inquirer.prompt([
    { type: "input", name: "id", message: "ID del mercader:" },
    { type: "input", name: "nombre", message: "Nombre del mercader:" },
    { type: "input", name: "tipo", message: "Tipo de mercader:" },
    { type: "input", name: "ubicacion", message: "Ubicación:" }
  ]);

  const nuevoMercader = new Mercader(
    respuestas.id,
    respuestas.nombre,
    respuestas.tipo,
    respuestas.ubicacion
  );

  inventario.agregarMercader(nuevoMercader);
  console.log("Mercader añadido con éxito.");
}

async function agregarCliente() {
  const respuestas = await inquirer.prompt([
    { type: "input", name: "id", message: "ID del cliente:" },
    { type: "input", name: "nombre", message: "Nombre del cliente:" },
    { type: "input", name: "raza", message: "Raza del cliente:" },
    { type: "input", name: "ubicacion", message: "Ubicación:" }
  ]);

  const nuevoCliente = new Cliente(
    respuestas.id,
    respuestas.nombre,
    respuestas.raza,
    respuestas.ubicacion
  );

  inventario.agregarCliente(nuevoCliente);
  console.log("Cliente añadido con éxito.");
}

// Funciones para eliminar
async function eliminarBien() {
  const respuestas = await inquirer.prompt([
    { type: "input", name: "id", message: "ID del bien a eliminar:" }
  ]);

  if (inventario.eliminarBien(respuestas.id)) {
    console.log("Bien eliminado con éxito.");
  } else {
    console.log("No se encontró el bien con el ID proporcionado.");
  }
}

async function eliminarMercader() {
  const respuestas = await inquirer.prompt([
    { type: "input", name: "id", message: "ID del mercader a eliminar:" }
  ]);

  if (inventario.eliminarMercader(respuestas.id)) {
    console.log("Mercader eliminado con éxito.");
  } else {
    console.log("No se encontró el mercader con el ID proporcionado.");
  }
}

async function eliminarCliente() {
  const respuestas = await inquirer.prompt([
    { type: "input", name: "id", message: "ID del cliente a eliminar:" }
  ]);

  if (inventario.eliminarCliente(respuestas.id)) {
    console.log("Cliente eliminado con éxito.");
  } else {
    console.log("No se encontró el cliente con el ID proporcionado.");
  }
}

// Funciones para modificar
async function modificarBien() {
  const respuestas = await inquirer.prompt([
    { type: "input", name: "id", message: "ID del bien a modificar:" },
    { type: "input", name: "nombre", message: "Nuevo nombre del bien:" },
    { type: "input", name: "descripcion", message: "Nueva descripción del bien:" },
    { type: "input", name: "material", message: "Nuevo material del bien:" },
    { type: "number", name: "peso", message: "Nuevo peso del bien:" },
    { type: "number", name: "valor", message: "Nuevo valor del bien en coronas:" }
  ]);

  if (inventario.modificarBien(respuestas.id, {
    nombre: respuestas.nombre,
    descripcion: respuestas.descripcion,
    material: respuestas.material,
    peso: respuestas.peso,
    valorCoronas: respuestas.valor
  })) {
    console.log("Bien modificado con éxito.");
  } else {
    console.log("No se encontró el bien con el ID proporcionado.");
  }
}

async function modificarMercader() {
  const respuestas = await inquirer.prompt([
    { type: "input", name: "id", message: "ID del mercader a modificar:" },
    { type: "input", name: "nombre", message: "Nuevo nombre del mercader:" },
    { type: "input", name: "tipo", message: "Nuevo tipo de mercader:" },
    { type: "input", name: "ubicacion", message: "Nueva ubicación del mercader:" }
  ]);

  if (inventario.modificarMercader(respuestas.id, {
    nombre: respuestas.nombre,
    tipo: respuestas.tipo,
    ubicacion: respuestas.ubicacion
  })) {
    console.log("Mercader modificado con éxito.");
  } else {
    console.log("No se encontró el mercader con el ID proporcionado.");
  }
}

async function modificarCliente() {
  const respuestas = await inquirer.prompt([
    { type: "input", name: "id", message: "ID del cliente a modificar:" },
    { type: "input", name: "nombre", message: "Nuevo nombre del cliente:" },
    { type: "input", name: "raza", message: "Nueva raza del cliente:" },
    { type: "input", name: "ubicacion", message: "Nueva ubicación del cliente:" }
  ]);

  if (inventario.modificarCliente(respuestas.id, {
    nombre: respuestas.nombre,
    raza: respuestas.raza,
    ubicacion: respuestas.ubicacion
  })) {
    console.log("Cliente modificado con éxito.");
  } else {
    console.log("No se encontró el cliente con el ID proporcionado.");
  }
}

async function buscarBienPorNombre() {
  await cargarBienesDesdeJSON(); // Cargar bienes desde el archivo JSON

  const respuestas = await inquirer.prompt([
    { type: "input", name: "nombre", message: "Nombre del bien a buscar:" }
  ]);

  const bien = inventario.buscarBien(respuestas.nombre);
  if (bien) {
    console.log("Bien encontrado:", bien);
  } else {
    console.log("No se encontró el bien con el nombre proporcionado.");
  }
}

async function buscarMercaderPorNombre() {
  await cargarMercaderesDesdeJSON(); // Cargar mercaderes desde el archivo JSON

  const respuestas = await inquirer.prompt([
    { type: "input", name: "nombre", message: "Nombre del mercader a buscar:" }
  ]);

  const mercader = inventario.buscarMercader(respuestas.nombre);
  if (mercader) {
    console.log("Mercader encontrado:", mercader);
  } else {
    console.log("No se encontró el mercader con el nombre proporcionado.");
  }
}

async function buscarClientePorNombre() {
  await cargarClientesDesdeJSON(); // Cargar clientes desde el archivo JSON

  const respuestas = await inquirer.prompt([
    { type: "input", name: "nombre", message: "Nombre del cliente a buscar:" }
  ]);

  const cliente = inventario.buscarCliente(respuestas.nombre);
  if (cliente) {
    console.log("Cliente encontrado:", cliente);
  } else {
    console.log("No se encontró el cliente con el nombre proporcionado.");
  }
}

async function cargarBienesDesdeJSON() {
  try {
    const data = await fs.readFile("./db/Bien.json", "utf-8"); // Cambiar la ruta al archivo
    const bienes = JSON.parse(data);
    bienes.forEach((bien: any) => {
      inventario.agregarBien(
        new Bien(bien._idUnico, bien._nombre, bien._descripcion, bien._material, bien._peso, bien._valorCoronas)
      );
    });
    console.log("Bienes cargados desde el archivo JSON.");
  } catch (error) {
    console.error("Error al cargar los bienes desde el archivo JSON:", error.message);
  }
}

async function cargarMercaderesDesdeJSON() {
  try {
    const data = await fs.readFile("./db/Mercader.json", "utf-8");
    const mercaderes = JSON.parse(data);
    mercaderes.forEach((mercader: any) => {
      inventario.agregarMercader(
        new Mercader(mercader._id, mercader._nombre, mercader._tipo, mercader._ubicacion)
      );
    });
    console.log("Mercaderes cargados desde el archivo JSON.");
  } catch (error) {
    console.error("Error al cargar los mercaderes desde el archivo JSON:", error.message);
  }
}

async function cargarClientesDesdeJSON() {
  try {
    const data = await fs.readFile("./db/Cliente.json", "utf-8");
    const clientes = JSON.parse(data);
    clientes.forEach((cliente: any) => {
      inventario.agregarCliente(
        new Cliente(cliente._idUnico, cliente._nombre, cliente._raza, cliente._ubicacion)
      );
    });
    console.log("Clientes cargados desde el archivo JSON.");
  } catch (error) {
    console.error("Error al cargar los clientes desde el archivo JSON:", error.message);
  }
}

menuPrincipal();  // dataBase.ts

import * as fs from 'fs';
import * as path from 'path';

export class DatabaseManager {
  private static dbPath = path.join(path.dirname(new URL(import.meta.url).pathname), '../db');

  static guardarDatos(tipo: string, datos: any) {
    const filePath = path.join(this.dbPath, ${tipo}.json);

    // Asegúrate de que el directorio existe antes de intentar guardar el archivo
    if (!fs.existsSync(this.dbPath)) {
      fs.mkdirSync(this.dbPath, { recursive: true });
    }

    // Verificar si el archivo existe y si no, crear el archivo vacío
    if (!fs.existsSync(filePath)) {
      fs.writeFileSync(filePath, JSON.stringify([])); // Crea un archivo vacío si no existe
    }

    let contenido: any[] = [];
    const rawData = fs.readFileSync(filePath, 'utf8');
    if (rawData) {
      contenido = JSON.parse(rawData);
    }

    contenido.push(datos);
    fs.writeFileSync(filePath, JSON.stringify(contenido, null, 2));
  }

  static leerDatos(tipo: string): any[] {
    const filePath = path.join(this.dbPath, ${tipo}.json);

    if (!fs.existsSync(filePath)) {
      return [];
    }

    const rawData = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(rawData);
  }
} /**
 * Clase que representa una transacción
 */
export class Transaccion {
    constructor(
      public tipo: "venta" | "compra" | "devolucion",
      public fecha: Date,
      public bienes: string[],
      public cantidadCoronas: number,
      public detalles: string
    ) {}
  } import { Transaccion } from "./trancision.js";

/**
 * Clase que gestiona las transacciones
 */
export class GestorTransacciones {
  private transacciones: Transaccion[] = [];

  /**
   * Método para registrar una venta
   * @param fecha - Fecha de la venta
   * @param bienes - Bienes intercambiados
   * @param cantidadCoronas - Cantidad de coronas involucrada
   * @param detalles - Detalles adicionales
   */
  registrarVenta(fecha: Date, bienes: string[], cantidadCoronas: number, detalles: string): void {
    const transaccion = new Transaccion("venta", fecha, bienes, cantidadCoronas, detalles);
    this.transacciones.push(transaccion);
  }

  /**
   * Método para registrar una compra
   * @param fecha - Fecha de la compra
   * @param bienes - Bienes intercambiados
   * @param cantidadCoronas - Cantidad de coronas involucrada
   * @param detalles - Detalles adicionales
   */
  registrarCompra(fecha: Date, bienes: string[], cantidadCoronas: number, detalles: string): void {
    const transaccion = new Transaccion("compra", fecha, bienes, cantidadCoronas, detalles);
    this.transacciones.push(transaccion);
  }

  /**
   * Método para registrar una devolución
   * @param fecha - Fecha de la devolución
   * @param bienes - Bienes devueltos
   * @param cantidadCoronas - Cantidad de coronas involucrada
   * @param detalles - Detalles adicionales
   */
  registrarDevolucion(fecha: Date, bienes: string[], cantidadCoronas: number, detalles: string): void {
    const transaccion = new Transaccion("devolucion", fecha, bienes, cantidadCoronas, detalles);
    this.transacciones.push(transaccion);
  }

  /**
   * Método para obtener el historial de transacciones
   * @returns - Historial de transacciones
   */
  obtenerHistorial(): Transaccion[] {
    return this.transacciones;
  }
} 